[{"id":"1d669124.c99cdf","type":"tab","label":"Sensor Data Flow","disabled":false,"info":""},{"id":"84c837b8.a18a08","type":"mqtt-broker","z":"","name":"Sensor MQTT","broker":"mqtt","port":"1883","clientid":"nodered","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"c5d1e49f.e97018","type":"mqtt in","z":"1d669124.c99cdf","name":"Sensors","topic":"customTopic","qos":"2","broker":"84c837b8.a18a08","x":100,"y":280,"wires":[["56611a1a.94872c"]]},{"id":"56611a1a.94872c","type":"json","z":"1d669124.c99cdf","name":"Convert to JSON","property":"payload","action":"","pretty":true,"x":210,"y":380,"wires":[["e0324370.f6f2c","bc6acca.588d83"]]},{"id":"ce25567e.9b14c","type":"debug","z":"1d669124.c99cdf","name":"Print payload","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":810,"y":460,"wires":[]},{"id":"133cbb7d.a40935","type":"file","z":"1d669124.c99cdf","name":"Write to File","filename":"/data/sensordata/data.txt","appendNewline":true,"createDir":true,"overwriteFile":"false","x":630,"y":320,"wires":[["4c469cc8.719324"]]},{"id":"4c469cc8.719324","type":"function","z":"1d669124.c99cdf","name":"Log to Fluentd","func":"const FluentLogger = context.global.get('FluentLogger');\nconst EventTime = FluentLogger.EventTime;\nconst Cloudevent = context.global.get('Cloudevent');\nconst uuidv4 = context.global.get('uuidv4');\n\nlet date = new Date();\nlet event = Cloudevent\n    .event()\n    .type(\"com.rdsea.nodered.mqtt.app.dataAsset\")\n    .source(`Node-Red/Sensor-Data-Flow/nodes/${node.name}-${node.id}`)\n    .id(uuidv4())\n    .time(date)\n    .data(msg.payload)\n    .subject(`${msg.payload.device_id}-${msg.payload.time}`)\n    .addExtension(\"message\",`Sensor data received and written to local File`);\n\nFluentLogger.emit('mqtt.app.dataAsset', event.spec.payload, EventTime.fromDate(date));\n\nreturn msg;","outputs":1,"noerr":0,"x":740,"y":400,"wires":[["ce25567e.9b14c"]]},{"id":"e0324370.f6f2c","type":"function","z":"1d669124.c99cdf","name":"Update Metrics","func":"const prometheus = context.global.get('prometheus');\nlet counter;\nif ( typeof context.global.get('sensorDataCounter') == 'undefined' || !context.global.get('sensorDataCounter') ){\n    counter = new prometheus.Counter({\n        name: 'mqtt_received_data_packets_total',\n        help: 'The total number of consumed sensor data packets from the MQTT broker.'\n    });\n    context.global.set('sensorDataCounter',counter);\n} else {\n    counter = context.global.get('sensorDataCounter');\n}\ncounter.inc();\nreturn msg;","outputs":1,"noerr":0,"x":420,"y":440,"wires":[[]]},{"id":"bc6acca.588d83","type":"function","z":"1d669124.c99cdf","name":"Check Data Quality","func":"const FluentLogger = context.global.get('FluentLogger');\nconst EventTime = FluentLogger.EventTime;\nconst Cloudevent = context.global.get('Cloudevent');\nconst uuidv4 = context.global.get('uuidv4');\n\nif(!msg.payload.hasOwnProperty('time')) {\n    let date = new Date();\n    let event = Cloudevent\n    .event()\n    .type(\"com.rdsea.nodered.mqtt.app.signal\")\n    .source(`Node-Red/Sensor-Data-Flow/nodes/${node.name}-${node.id}`)\n    .id(uuidv4())\n    .time(date)\n    .data(msg.payload)\n    .subject(`${msg.payload.device_id}`)\n    .addExtension(\"message\",'Sensor data is missing time information!');\n    FluentLogger.emit('mqtt.app.signal.MissingTimeInformation', event.spec.payload, EventTime.fromDate(date));\n    return null; // return null, thus halting the flow\n} \n\n// perform additional checks depending on the use-case\n// whenever we encounter an issue, the function should automatically return null,\n// i.e. not propagating the (faulty) payload.\n\nreturn msg;","outputs":1,"noerr":0,"x":410,"y":320,"wires":[["133cbb7d.a40935"]]}]